# The "edges" mapping strategy has been removed since edges are no longer supported in the ngrok operator.
# If the annotation is still set to edges, do the same thing as if the annotation was set to "endpoints" or not specified.
input:
  ingressClasses:
  - apiVersion: networking.k8s.io/v1
    kind: IngressClass
    metadata:
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ngrok-operator
        app.kubernetes.io/name: ngrok-operator
        app.kubernetes.io/part-of: ngrok-operator
      name: ngrok
    spec:
      controller: k8s.ngrok.com/ingress-controller
  ingresses:
  - apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      annotations:
        k8s.ngrok.com/traffic-policy: response-503
        k8s.ngrok.com/mapping-strategy: edges
      name: test-ingress-1
      namespace: default
    spec:
      ingressClassName: ngrok
      defaultBackend:
        service:
          name: test-service-1
          port:
            number: 8080
      rules:
        - host: test-ingresses.ngrok.io
          http:
            paths:
              - path: /test-1
                pathType: Prefix
                backend:
                  service:
                    name: test-service-1
                    port:
                      number: 8080
  - apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      annotations:
        k8s.ngrok.com/traffic-policy: response-503
        k8s.ngrok.com/mapping-strategy: edges
      name: test-ingress-2
      namespace: default
    spec:
      ingressClassName: ngrok
      defaultBackend:
        service:
          name: test-service-1
          port:
            number: 8080
      rules:
        - host: test-ingresses.ngrok.io
          http:
            paths:
              - path: /test-2
                pathType: Prefix
                backend:
                  service:
                    name: test-service-2
                    port:
                      number: 8080
  services:
  - apiVersion: v1
    kind: Service
    metadata:
      name: test-service-1
      namespace: default
    spec:
      ports:
      - name: http
        port: 8080
        protocol: TCP
        targetPort: http
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      name: test-service-2
      namespace: default
    spec:
      ports:
      - name: http
        port: 8080
        protocol: TCP
        targetPort: http
      type: ClusterIP
  trafficPolicies:
  - apiVersion: ngrok.k8s.ngrok.com/v1alpha1
    kind: NgrokTrafficPolicy
    metadata:
      name: response-503
      namespace: default
    spec:
      policy:
        on_http_request:
          - name: response-503
            expressions:
              - req.url.path.startsWith('/foo')
            actions:
              - type: custom-response
                config:
                  status_code: 503
                  content: "Service is temporarily unavailable"
                  headers:
                    content-type: text/plain
expected:
  cloudEndpoints: []
  agentEndpoints:
  - apiVersion: ngrok.k8s.ngrok.com/v1alpha1
    kind: AgentEndpoint
    metadata:
      name: e3b0c-test-service-1-default-8080
      namespace: default
      labels:
        k8s.ngrok.com/controller-name: test-manager-name
        k8s.ngrok.com/controller-namespace: test-manager-namespace
    spec:
      url: https://test-ingresses.ngrok.io
      upstream:
        url: http://test-service-1.default:8080
        protocol: null
        proxyProtocolVersion: null
      trafficPolicy:
        inline:
          on_http_request:
          - actions:
            - config:
                content: Service is temporarily unavailable
                headers:
                  content-type: text/plain
                status_code: 503
              type: custom-response
            expressions:
            - req.url.path.startsWith('/foo')
            name: response-503
          - actions:
            - config:
                vars:
                - request_matched_local_svc: false
              type: set-vars
            name: Initialize-Local-Service-Match
          - actions:
            - config:
                vars:
                - request_matched_local_svc: true
              type: set-vars
            expressions:
            - req.url.path.startsWith('/test-1')
            - vars.request_matched_local_svc == false
            name: Generated-Local-Service-Route
          - name: Generated-Route
            expressions:
            - req.url.path.startsWith('/test-2')
            - vars.request_matched_local_svc == false
            actions:
            - type: forward-internal
              config:
                url: https://e3b0c-test-service-2-default-8080.internal
          - name: Generated-Route-Default-Backend
            expressions:
            - vars.request_matched_local_svc == false
            actions:
            - type: set-vars
              config:
                vars:
                - request_matched_local_svc: true
          - actions:
            - config:
                content: No route was found for this ngrok Endpoint
                headers:
                  content-type: text/plain
                status_code: 404
              type: custom-response
            expressions:
            - vars.request_matched_local_svc == false
            name: Fallback-404
  - apiVersion: ngrok.k8s.ngrok.com/v1alpha1
    kind: AgentEndpoint
    metadata:
      name: e3b0c-test-service-2-default-8080
      namespace: default
      labels:
        k8s.ngrok.com/controller-name: test-manager-name
        k8s.ngrok.com/controller-namespace: test-manager-namespace
    spec:
      url: https://e3b0c-test-service-2-default-8080.internal
      upstream:
        url: http://test-service-2.default:8080

