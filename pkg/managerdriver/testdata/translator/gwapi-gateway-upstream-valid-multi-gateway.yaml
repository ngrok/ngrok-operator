# Tests that Gateways different backend TLS configs result in different upstreams
input:
  gatewayClasses:
  - apiVersion: gateway.networking.k8s.io/v1
    kind: GatewayClass
    metadata:
      name: ngrok
    spec:
      controllerName: ngrok.com/gateway-controller
  gateways:
  - apiVersion: gateway.networking.k8s.io/v1
    kind: Gateway
    metadata:
      name: test-gateway-1
      namespace: default
      annotations:
        k8s.ngrok.com/mapping-strategy: "endpoints"
    spec:
      backendTLS:
        clientCertificateRef:
          name: client-cert-secret-1
      gatewayClassName: ngrok
      listeners:
        - name: test-1
          hostname: "test-hostname-1.ngrok.io"
          port: 443
          protocol: HTTPS
  - apiVersion: gateway.networking.k8s.io/v1
    kind: Gateway
    metadata:
      name: test-gateway-2
      namespace: default
      annotations:
        k8s.ngrok.com/mapping-strategy: "endpoints"
    spec:
      backendTLS:
        clientCertificateRef:
          name: client-cert-secret-2
      gatewayClassName: ngrok
      listeners:
        - name: test-2
          hostname: "test-hostname-2.ngrok.io"
          port: 443
          protocol: HTTPS
  httpRoutes:
  - apiVersion: gateway.networking.k8s.io/v1
    kind: HTTPRoute
    metadata:
      name: test-route
      namespace: default
    spec:
      hostnames:
      - "*.ngrok.io"
      parentRefs:
      - group: gateway.networking.k8s.io
        kind: Gateway
        name: test-gateway-1
        namespace: default
      - group: gateway.networking.k8s.io
        kind: Gateway
        name: test-gateway-2
        namespace: default
      rules:
      - matches:
          - path:
              type: PathPrefix
              value: /test-service-1
        backendRefs:
          - group: ""
            kind: Service
            name: test-service-1
            port: 8080
            weight: 1
  services:
  - apiVersion: v1
    kind: Service
    metadata:
      name: test-service-1
      namespace: default
    spec:
      ports:
      - name: http
        port: 8080
        protocol: TCP
        targetPort: http
      type: ClusterIP
  secrets:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: client-cert-secret-1
      namespace: default
    type: kubernetes.io/tls
    data:
      tls.key: U2VydmVyUHJpdmF0ZUtleQ==
      tls.crt: U2VydmVyQ2VydA==
  - apiVersion: v1
    kind: Secret
    metadata:
      name: client-cert-secret-2
      namespace: default
    type: kubernetes.io/tls
    data:
      tls.key: U2VydmVyUHJpdmF0ZUtleQ==
      tls.crt: U2VydmVyQ2VydA==
expected:
  cloudEndpoints:
  - apiVersion: ngrok.k8s.ngrok.com/v1alpha1
    kind: CloudEndpoint
    metadata:
      labels:
        k8s.ngrok.com/controller-name: test-manager-name
        k8s.ngrok.com/controller-namespace: test-manager-namespace
      name: test-gateway-1.default-test-hostname-1.ngrok.io
      namespace: default
    spec:
      bindings:
      - public
      trafficPolicy:
        policy:
            on_http_request:
              - name: Generated-Route
                expressions:
                  - "req.url.path.startsWith('/test-service-1')"
                actions:
                  - type: forward-internal
                    config:
                      url: "https://e3b0c-test-service-1-default-tls-96179-8080.internal"
              - name: Fallback-404
                actions:
                - type: custom-response
                  config:
                    status_code: 404
                    content: "No route was found for this ngrok Cloud Endpoint"
                    headers:
                      content-type: text/plain
      url: https://test-hostname-1.ngrok.io
  - apiVersion: ngrok.k8s.ngrok.com/v1alpha1
    kind: CloudEndpoint
    metadata:
      labels:
        k8s.ngrok.com/controller-name: test-manager-name
        k8s.ngrok.com/controller-namespace: test-manager-namespace
      name: test-gateway-2.default-test-hostname-2.ngrok.io
      namespace: default
    spec:
      bindings:
      - public
      trafficPolicy:
        policy:
            on_http_request:
              - name: Generated-Route
                expressions:
                  - "req.url.path.startsWith('/test-service-1')"
                actions:
                  - type: forward-internal
                    config:
                      url: "https://e3b0c-test-service-1-default-tls-3039d-8080.internal"
              - name: Fallback-404
                actions:
                - type: custom-response
                  config:
                    status_code: 404
                    content: "No route was found for this ngrok Cloud Endpoint"
                    headers:
                      content-type: text/plain
      url: https://test-hostname-2.ngrok.io
  agentEndpoints:
  - apiVersion: ngrok.k8s.ngrok.com/v1alpha1
    kind: AgentEndpoint
    metadata:
      labels:
        k8s.ngrok.com/controller-name: test-manager-name
        k8s.ngrok.com/controller-namespace: test-manager-namespace
      name: e3b0c-test-service-1-default-tls-3039d-8080
      namespace: default
    spec:
      clientCertificateRefs:
      - name: client-cert-secret-2
        namespace: default
      url: "https://e3b0c-test-service-1-default-tls-3039d-8080.internal"
      upstream:
        url: "http://test-service-1.default:8080"
      bindings:
      - "internal"
  - apiVersion: ngrok.k8s.ngrok.com/v1alpha1
    kind: AgentEndpoint
    metadata:
      labels:
        k8s.ngrok.com/controller-name: test-manager-name
        k8s.ngrok.com/controller-namespace: test-manager-namespace
      name: e3b0c-test-service-1-default-tls-96179-8080
      namespace: default
    spec:
      clientCertificateRefs:
      - name: client-cert-secret-1
        namespace: default
      url: "https://e3b0c-test-service-1-default-tls-96179-8080.internal"
      upstream:
        url: "http://test-service-1.default:8080"
      bindings:
      - "internal"