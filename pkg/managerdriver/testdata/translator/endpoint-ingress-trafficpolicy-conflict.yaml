# Ingresses with conflicting traffic policy annotations
input:
  ingressClasses:
  - apiVersion: networking.k8s.io/v1
    kind: IngressClass
    metadata:
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ngrok-operator
        app.kubernetes.io/name: ngrok-operator
        app.kubernetes.io/part-of: ngrok-operator
      name: ngrok
    spec:
      controller: k8s.ngrok.com/ingress-controller
  ingresses:
  - apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      annotations:
        k8s.ngrok.com/traffic-policy: response-503
        k8s.ngrok.com/mapping-strategy: "endpoints"
      name: test-ingress-1
      namespace: default
    spec:
      ingressClassName: ngrok
      rules:
        - host: test-ingresses.ngrok.io
          http:
            paths:
              - path: /test-1
                pathType: Prefix
                backend:
                  service:
                    name: test-service-1
                    port:
                      number: 8080
  - apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      annotations:
        k8s.ngrok.com/traffic-policy: response-404
        k8s.ngrok.com/mapping-strategy: "endpoints"
      name: test-ingress-2
      namespace: default
    spec:
      ingressClassName: ngrok
      rules:
        - host: test-ingresses.ngrok.io
          http:
            paths:
              - path: /test-2
                pathType: Prefix
                backend:
                  service:
                    name: test-service-2
                    port:
                      number: 8080
  services:
  - apiVersion: v1
    kind: Service
    metadata:
      name: test-service-1
      namespace: default
    spec:
      ports:
      - name: http
        port: 8080
        protocol: TCP
        targetPort: http
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      name: test-service-2
      namespace: default
    spec:
      ports:
      - name: http
        port: 8080
        protocol: TCP
        targetPort: http
      type: ClusterIP
  trafficPolicies: 
  - apiVersion: ngrok.k8s.ngrok.com/v1alpha1
    kind: NgrokTrafficPolicy
    metadata:
      name: response-503
      namespace: default
    spec:
      policy:
        on_http_request:
          - name: response-503
            expressions:
              - req.url.path.startsWith("/foo")
            actions:
              - type: custom-response
                config:
                  status_code: 503
                  content: "Service is temporarily unavailable"
                  headers:
                    content-type: text/plain
  - apiVersion: ngrok.k8s.ngrok.com/v1alpha1
    kind: NgrokTrafficPolicy
    metadata:
      name: response-404
      namespace: default
    spec:
      policy:
        on_http_request:
          - name: response-404
            expressions:
              - req.url.path.startsWith("/foo")
            actions:
              - type: custom-response
                config:
                  status_code: 404
                  content: "Not found"
                  headers:
                    content-type: text/plain
expected:
  # Generated cloud endpoint should have the first traffic policy, but the second ingress will not be processed due to the
  # traffic policy conflict
  cloudEndpoints:
  - apiVersion: ngrok.k8s.ngrok.com/v1alpha1
    kind: CloudEndpoint
    metadata:
      labels:
        k8s.ngrok.com/controller-name: test-manager-name
        k8s.ngrok.com/controller-namespace: test-manager-namespace
      name: test-ingresses.ngrok.io
      namespace: default
    spec:
      bindings:
        - public
      url: https://test-ingresses.ngrok.io
      trafficPolicy:
        policy:
          on_http_request:
          - name: response-503
            expressions:
              - req.url.path.startsWith("/foo")
            actions:
              - type: custom-response
                config:
                  status_code: 503
                  content: "Service is temporarily unavailable"
                  headers:
                    content-type: text/plain
          - name: Generated-Route-/test-1
            expressions:
            - req.url.path.startsWith("/test-1")
            actions:
            - type: forward-internal
              config:
                url: https://e3b0c-test-service-1-default-8080.internal
  agentEndpoints:
  - apiVersion: ngrok.k8s.ngrok.com/v1alpha1
    kind: AgentEndpoint
    metadata:
      labels:
        k8s.ngrok.com/controller-name: test-manager-name
        k8s.ngrok.com/controller-namespace: test-manager-namespace
      name: e3b0c-test-service-1-default-8080
      namespace: default
    spec:
      url: "https://e3b0c-test-service-1-default-8080.internal"
      upstream:
        url: "http://test-service-1.default:8080"
      bindings:
        - internal

