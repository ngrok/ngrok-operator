# Tests that Services within backendRefs require reference grants for cross namespace
input:
  gatewayClasses:
  - apiVersion: gateway.networking.k8s.io/v1
    kind: GatewayClass
    metadata:
      name: ngrok
    spec:
      controllerName: ngrok.com/gateway-controller
  gateways:
  - apiVersion: gateway.networking.k8s.io/v1
    kind: Gateway
    metadata:
      name: test-gateway
      namespace: default
      annotations:
        k8s.ngrok.com/mapping-strategy: "endpoints"
    spec:
      gatewayClassName: ngrok
      infrastructure:
        annotations:
          annotation-key: annotation-val
        labels:
          label-key: label-val
      listeners:
        - name: test-hostname
          hostname: "test-hostname.ngrok.io"
          port: 443
          protocol: HTTPS
  httpRoutes:
  - apiVersion: gateway.networking.k8s.io/v1
    kind: HTTPRoute
    metadata:
      name: test-route
      namespace: default
    spec:
      hostnames:
      - test-hostname.ngrok.io
      parentRefs:
      - group: gateway.networking.k8s.io
        kind: Gateway
        name: test-gateway
        namespace: default
      rules:
      - matches:
          - path:
              type: PathPrefix
              value: /same-namespace-svc
        backendRefs:
          - group: ""
            kind: Service
            name: same-namespace-svc
            port: 8080
            weight: 1
      - matches:
          - path:
              type: PathPrefix
              value: /cross-namespace # Not allowed without a ReferenceGrant
        backendRefs:
          - group: ""
            kind: Service
            name: cross-namespace-svc
            namespace: other
            port: 8080
            weight: 1
  services:
  - apiVersion: v1
    kind: Service
    metadata:
      name: same-namespace-svc
      namespace: default
    spec:
      ports:
      - name: http
        port: 8080
        protocol: TCP
        targetPort: http
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      name: cross-namespace-svc
      namespace: other
    spec:
      ports:
      - name: http
        port: 8080
        protocol: TCP
        targetPort: http
      type: ClusterIP
expected:
  cloudEndpoints:
  - apiVersion: ngrok.k8s.ngrok.com/v1alpha1
    kind: CloudEndpoint
    metadata:
      annotations:
        annotation-key: annotation-val
      labels:
        k8s.ngrok.com/controller-name: test-manager-name
        k8s.ngrok.com/controller-namespace: test-manager-namespace
        label-key: label-val
      name: test-gateway.default-test-hostname.ngrok.io
      namespace: default
    spec:
      trafficPolicy:
        policy:
            on_http_request:
              - name: Generated-Route
                expressions:
                  - "req.url.path.startsWith('/same-namespace-svc')"
                actions:
                  - type: forward-internal
                    config:
                      url: "https://e3b0c-same-namespace-svc-default-8080.internal"
              - name: Fallback-404
                actions:
                - type: custom-response
                  config:
                    status_code: 404
                    content: "No route was found for this ngrok Cloud Endpoint"
                    headers:
                      content-type: text/plain
      url: https://test-hostname.ngrok.io
  agentEndpoints:
  - apiVersion: ngrok.k8s.ngrok.com/v1alpha1
    kind: AgentEndpoint
    metadata:
      annotations:
        annotation-key: annotation-val
      labels:
        k8s.ngrok.com/controller-name: test-manager-name
        k8s.ngrok.com/controller-namespace: test-manager-namespace
        label-key: label-val
      name: e3b0c-same-namespace-svc-default-8080
      namespace: default
    spec:
      url: "https://e3b0c-same-namespace-svc-default-8080.internal"
      upstream:
        url: "http://same-namespace-svc.default:8080"
      bindings:
      - internal

