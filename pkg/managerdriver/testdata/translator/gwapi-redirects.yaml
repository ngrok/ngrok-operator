# Test redirect filters
input:
  gatewayClasses:
  - apiVersion: gateway.networking.k8s.io/v1
    kind: GatewayClass
    metadata:
      name: ngrok
    spec:
      controllerName: ngrok.com/gateway-controller
  gateways:
  - apiVersion: gateway.networking.k8s.io/v1
    kind: Gateway
    metadata:
      name: test-gateway
      namespace: default
      annotations:
        k8s.ngrok.com/mapping-strategy: "endpoints"
    spec:
      gatewayClassName: ngrok
      listeners:
        - name: test-hostname
          hostname: "test-hostname.ngrok.io"
          port: 443
          protocol: HTTPS
  httpRoutes:
  - apiVersion: gateway.networking.k8s.io/v1
    kind: HTTPRoute
    metadata:
      name: test-route
      namespace: default
    spec:
      hostnames:
      - test-hostname.ngrok.io
      parentRefs:
      - group: gateway.networking.k8s.io
        kind: Gateway
        name: test-gateway
        namespace: default
      rules:
      - matches:
          - path:
              type: PathPrefix
              value: /redirect-prefix
        filters:
        - type: RequestRedirect
          requestRedirect:
            path: 
              type: ReplacePrefixMatch
              replacePrefixMatch: "/redirect"
      - matches:
          - path:
              type: PathPrefix
              value: /redirect-fullpath
        filters:
        - type: RequestRedirect
          requestRedirect:
            path: 
              type: ReplaceFullPath
              replaceFullPath: "/redirect"
      - matches:
          - path:
              type: PathPrefix
              value: /redirect-hostname
        filters:
        - type: RequestRedirect
          requestRedirect:
            hostname: redirected-hostname.com
      - matches:
          - path:
              type: PathPrefix
              value: /redirect-scheme
        filters:
        - type: RequestRedirect
          requestRedirect:
            scheme: http
      - matches:
          - path:
              type: PathPrefix
              value: /redirect-port
        filters:
        - type: RequestRedirect
          requestRedirect:
            port: 8443
  services:
  - apiVersion: v1
    kind: Service
    metadata:
      name: test-service-1
      namespace: default
    spec:
      ports:
      - name: http
        port: 8080
        protocol: TCP
        targetPort: http
      type: ClusterIP
expected:
  cloudEndpoints:
  - apiVersion: ngrok.k8s.ngrok.com/v1alpha1
    kind: CloudEndpoint
    metadata:
      labels:
        k8s.ngrok.com/controller-name: test-manager-name
        k8s.ngrok.com/controller-namespace: test-manager-namespace
      name: test-gateway.default-test-hostname.ngrok.io
      namespace: default
    spec:
      trafficPolicy:
        policy:
          on_http_request:
            - name: GatewayAPI-Redirect-Filter
              expressions:
                - "req.url.path.startsWith('/redirect-fullpath')"
              actions:
                - type: redirect
                  config:
                    from: "^(?P<scheme>[a-zA-Z][a-zA-Z0-9+\\-.]*):\\/\\/(?P<hostname>[^\\/:]+)(?P<port>:\\d+)?(?P<prefix>\\/redirect-fullpath)(?P<remaining>.*)$"
                    to: "$1://$2$3/redirect"
                    status_code: 302
            - name: GatewayAPI-Redirect-Filter
              expressions:
                - "req.url.path.startsWith('/redirect-hostname')"
              actions:
                - type: redirect
                  config:
                    from: "^(?P<scheme>[a-zA-Z][a-zA-Z0-9+\\-.]*):\\/\\/(?P<hostname>[^\\/:]+)(?P<port>:\\d+)?(?P<prefix>\\/redirect-hostname)(?P<remaining>.*)$"
                    to: "$1://redirected-hostname.com$3$4$5"
                    status_code: 302
            - name: GatewayAPI-Redirect-Filter
              expressions:
                - "req.url.path.startsWith('/redirect-prefix')"
              actions:
                - type: redirect
                  config:
                    from: "^(?P<scheme>[a-zA-Z][a-zA-Z0-9+\\-.]*):\\/\\/(?P<hostname>[^\\/:]+)(?P<port>:\\d+)?(?P<prefix>\\/redirect-prefix)(?P<remaining>.*)$"
                    to: "$1://$2$3/redirect$5"
                    status_code: 302
            - name: GatewayAPI-Redirect-Filter
              expressions:
                - "req.url.path.startsWith('/redirect-scheme')"
              actions:
                - type: redirect
                  config:
                    from: "^(?P<scheme>[a-zA-Z][a-zA-Z0-9+\\-.]*):\\/\\/(?P<hostname>[^\\/:]+)(?P<port>:\\d+)?(?P<prefix>\\/redirect-scheme)(?P<remaining>.*)$"
                    to: "http://$2$3$4$5"
                    status_code: 302
            - name: GatewayAPI-Redirect-Filter
              expressions:
                - "req.url.path.startsWith('/redirect-port')"
              actions:
                - type: redirect
                  config:
                    from: "^(?P<scheme>[a-zA-Z][a-zA-Z0-9+\\-.]*):\\/\\/(?P<hostname>[^\\/:]+)(?P<port>:\\d+)?(?P<prefix>\\/redirect-port)(?P<remaining>.*)$"
                    to: "$1://$2:8443$4$5"
                    status_code: 302
            - name: Fallback-404
              actions:
              - type: custom-response
                config:
                  status_code: 404
                  content: "No route was found for this ngrok Cloud Endpoint"
                  headers:
                    content-type: text/plain
      url: https://test-hostname.ngrok.io
