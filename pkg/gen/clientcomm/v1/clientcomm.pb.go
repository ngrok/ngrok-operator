// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: clientcomm/v1/clientcomm.proto

package clientcommv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum for identifying a client message kind
//
// next-free-field: 2
type ClientMessageKind int32

const (
	ClientMessageKind_TARGET_KIND_UNSPECIFIED ClientMessageKind = 0 // Default for backward compatibility
	ClientMessageKind_K8S_OPERATOR_TELEMETRY  ClientMessageKind = 1
)

// Enum value maps for ClientMessageKind.
var (
	ClientMessageKind_name = map[int32]string{
		0: "TARGET_KIND_UNSPECIFIED",
		1: "K8S_OPERATOR_TELEMETRY",
	}
	ClientMessageKind_value = map[string]int32{
		"TARGET_KIND_UNSPECIFIED": 0,
		"K8S_OPERATOR_TELEMETRY":  1,
	}
)

func (x ClientMessageKind) Enum() *ClientMessageKind {
	p := new(ClientMessageKind)
	*p = x
	return p
}

func (x ClientMessageKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientMessageKind) Descriptor() protoreflect.EnumDescriptor {
	return file_clientcomm_v1_clientcomm_proto_enumTypes[0].Descriptor()
}

func (ClientMessageKind) Type() protoreflect.EnumType {
	return &file_clientcomm_v1_clientcomm_proto_enumTypes[0]
}

func (x ClientMessageKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientMessageKind.Descriptor instead.
func (ClientMessageKind) EnumDescriptor() ([]byte, []int) {
	return file_clientcomm_v1_clientcomm_proto_rawDescGZIP(), []int{0}
}

// Signed message from the client
//
// next-free-field: 3
type SignedClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`     // Deterministic serialization of ClientMessage
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"` // Signature using client's private key
}

func (x *SignedClientMessage) Reset() {
	*x = SignedClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientcomm_v1_clientcomm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedClientMessage) ProtoMessage() {}

func (x *SignedClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_clientcomm_v1_clientcomm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedClientMessage.ProtoReflect.Descriptor instead.
func (*SignedClientMessage) Descriptor() ([]byte, []int) {
	return file_clientcomm_v1_clientcomm_proto_rawDescGZIP(), []int{0}
}

func (x *SignedClientMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SignedClientMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Canonical payload (to be signed) from the client.
//
// next-free-field: 2
type ClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*ClientMessage_K8SOperatorTelemetry
	Kind isClientMessage_Kind `protobuf_oneof:"kind"`
}

func (x *ClientMessage) Reset() {
	*x = ClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientcomm_v1_clientcomm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMessage) ProtoMessage() {}

func (x *ClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_clientcomm_v1_clientcomm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMessage.ProtoReflect.Descriptor instead.
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return file_clientcomm_v1_clientcomm_proto_rawDescGZIP(), []int{1}
}

func (m *ClientMessage) GetKind() isClientMessage_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *ClientMessage) GetK8SOperatorTelemetry() *K8SOperatorTelemetry {
	if x, ok := x.GetKind().(*ClientMessage_K8SOperatorTelemetry); ok {
		return x.K8SOperatorTelemetry
	}
	return nil
}

type isClientMessage_Kind interface {
	isClientMessage_Kind()
}

type ClientMessage_K8SOperatorTelemetry struct {
	K8SOperatorTelemetry *K8SOperatorTelemetry `protobuf:"bytes,1,opt,name=k8s_operator_telemetry,json=k8sOperatorTelemetry,proto3,oneof"`
}

func (*ClientMessage_K8SOperatorTelemetry) isClientMessage_Kind() {}

// Telemetry report from the k8s operator
//
// next-free-field: 2
type K8SOperatorTelemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Placeholder string `protobuf:"bytes,1,opt,name=placeholder,proto3" json:"placeholder,omitempty"`
}

func (x *K8SOperatorTelemetry) Reset() {
	*x = K8SOperatorTelemetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientcomm_v1_clientcomm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8SOperatorTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SOperatorTelemetry) ProtoMessage() {}

func (x *K8SOperatorTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_clientcomm_v1_clientcomm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SOperatorTelemetry.ProtoReflect.Descriptor instead.
func (*K8SOperatorTelemetry) Descriptor() ([]byte, []int) {
	return file_clientcomm_v1_clientcomm_proto_rawDescGZIP(), []int{2}
}

func (x *K8SOperatorTelemetry) GetPlaceholder() string {
	if x != nil {
		return x.Placeholder
	}
	return ""
}

// Signed message from the server
//
// next-free-field: 3
type SignedServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`     // Deterministic serialization of ServerMessage
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"` // Signature using server's private key
}

func (x *SignedServerMessage) Reset() {
	*x = SignedServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientcomm_v1_clientcomm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedServerMessage) ProtoMessage() {}

func (x *SignedServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_clientcomm_v1_clientcomm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedServerMessage.ProtoReflect.Descriptor instead.
func (*SignedServerMessage) Descriptor() ([]byte, []int) {
	return file_clientcomm_v1_clientcomm_proto_rawDescGZIP(), []int{3}
}

func (x *SignedServerMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SignedServerMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Canonical payload (to be signed) from the server.
//
// next-free-field: 2
type ServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*ServerMessage_SetReportingInterval
	Kind isServerMessage_Kind `protobuf_oneof:"kind"`
}

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientcomm_v1_clientcomm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_clientcomm_v1_clientcomm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor instead.
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return file_clientcomm_v1_clientcomm_proto_rawDescGZIP(), []int{4}
}

func (m *ServerMessage) GetKind() isServerMessage_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *ServerMessage) GetSetReportingInterval() *SetReportingInterval {
	if x, ok := x.GetKind().(*ServerMessage_SetReportingInterval); ok {
		return x.SetReportingInterval
	}
	return nil
}

type isServerMessage_Kind interface {
	isServerMessage_Kind()
}

type ServerMessage_SetReportingInterval struct {
	SetReportingInterval *SetReportingInterval `protobuf:"bytes,1,opt,name=set_reporting_interval,json=setReportingInterval,proto3,oneof"`
}

func (*ServerMessage_SetReportingInterval) isServerMessage_Kind() {}

// Specifies how often the client should send telemetry data.
// If zero, telemetry reporting should be disabled.
//
// next-free-field: 3
type SetReportingInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewInterval *durationpb.Duration `protobuf:"bytes,1,opt,name=new_interval,json=newInterval,proto3" json:"new_interval,omitempty"`
	MessageKind ClientMessageKind    `protobuf:"varint,2,opt,name=message_kind,json=messageKind,proto3,enum=clientcomm.v1.ClientMessageKind" json:"message_kind,omitempty"`
}

func (x *SetReportingInterval) Reset() {
	*x = SetReportingInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientcomm_v1_clientcomm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetReportingInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReportingInterval) ProtoMessage() {}

func (x *SetReportingInterval) ProtoReflect() protoreflect.Message {
	mi := &file_clientcomm_v1_clientcomm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReportingInterval.ProtoReflect.Descriptor instead.
func (*SetReportingInterval) Descriptor() ([]byte, []int) {
	return file_clientcomm_v1_clientcomm_proto_rawDescGZIP(), []int{5}
}

func (x *SetReportingInterval) GetNewInterval() *durationpb.Duration {
	if x != nil {
		return x.NewInterval
	}
	return nil
}

func (x *SetReportingInterval) GetMessageKind() ClientMessageKind {
	if x != nil {
		return x.MessageKind
	}
	return ClientMessageKind_TARGET_KIND_UNSPECIFIED
}

var File_clientcomm_v1_clientcomm_proto protoreflect.FileDescriptor

var file_clientcomm_v1_clientcomm_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x76, 0x31, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x4d, 0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x74,
	0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x5b, 0x0a, 0x16, 0x6b, 0x38, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x38, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x14, 0x6b, 0x38, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x42, 0x06, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x22, 0x38, 0x0a, 0x14, 0x4b, 0x38, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x4d,
	0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x74, 0x0a,
	0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5b,
	0x0a, 0x16, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x14, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x0c,
	0x6e, 0x65, 0x77, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6e,
	0x65, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x0c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x2a,
	0x4c, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4b, 0x38, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x10, 0x01, 0x32, 0x69, 0x0a,
	0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x22, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0xb9, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x76, 0x31, 0x42, 0x0f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x67,
	0x72, 0x6f, 0x6b, 0x2f, 0x6e, 0x67, 0x72, 0x6f, 0x6b, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d,
	0x6d, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x63, 0x6f, 0x6d, 0x6d, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x19, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x63, 0x6f, 0x6d, 0x6d, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x6d,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_clientcomm_v1_clientcomm_proto_rawDescOnce sync.Once
	file_clientcomm_v1_clientcomm_proto_rawDescData = file_clientcomm_v1_clientcomm_proto_rawDesc
)

func file_clientcomm_v1_clientcomm_proto_rawDescGZIP() []byte {
	file_clientcomm_v1_clientcomm_proto_rawDescOnce.Do(func() {
		file_clientcomm_v1_clientcomm_proto_rawDescData = protoimpl.X.CompressGZIP(file_clientcomm_v1_clientcomm_proto_rawDescData)
	})
	return file_clientcomm_v1_clientcomm_proto_rawDescData
}

var file_clientcomm_v1_clientcomm_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_clientcomm_v1_clientcomm_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_clientcomm_v1_clientcomm_proto_goTypes = []interface{}{
	(ClientMessageKind)(0),       // 0: clientcomm.v1.ClientMessageKind
	(*SignedClientMessage)(nil),  // 1: clientcomm.v1.SignedClientMessage
	(*ClientMessage)(nil),        // 2: clientcomm.v1.ClientMessage
	(*K8SOperatorTelemetry)(nil), // 3: clientcomm.v1.K8sOperatorTelemetry
	(*SignedServerMessage)(nil),  // 4: clientcomm.v1.SignedServerMessage
	(*ServerMessage)(nil),        // 5: clientcomm.v1.ServerMessage
	(*SetReportingInterval)(nil), // 6: clientcomm.v1.SetReportingInterval
	(*durationpb.Duration)(nil),  // 7: google.protobuf.Duration
}
var file_clientcomm_v1_clientcomm_proto_depIdxs = []int32{
	3, // 0: clientcomm.v1.ClientMessage.k8s_operator_telemetry:type_name -> clientcomm.v1.K8sOperatorTelemetry
	6, // 1: clientcomm.v1.ServerMessage.set_reporting_interval:type_name -> clientcomm.v1.SetReportingInterval
	7, // 2: clientcomm.v1.SetReportingInterval.new_interval:type_name -> google.protobuf.Duration
	0, // 3: clientcomm.v1.SetReportingInterval.message_kind:type_name -> clientcomm.v1.ClientMessageKind
	1, // 4: clientcomm.v1.ClientCommService.Stream:input_type -> clientcomm.v1.SignedClientMessage
	4, // 5: clientcomm.v1.ClientCommService.Stream:output_type -> clientcomm.v1.SignedServerMessage
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_clientcomm_v1_clientcomm_proto_init() }
func file_clientcomm_v1_clientcomm_proto_init() {
	if File_clientcomm_v1_clientcomm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_clientcomm_v1_clientcomm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientcomm_v1_clientcomm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientcomm_v1_clientcomm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8SOperatorTelemetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientcomm_v1_clientcomm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientcomm_v1_clientcomm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientcomm_v1_clientcomm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetReportingInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_clientcomm_v1_clientcomm_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ClientMessage_K8SOperatorTelemetry)(nil),
	}
	file_clientcomm_v1_clientcomm_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ServerMessage_SetReportingInterval)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_clientcomm_v1_clientcomm_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_clientcomm_v1_clientcomm_proto_goTypes,
		DependencyIndexes: file_clientcomm_v1_clientcomm_proto_depIdxs,
		EnumInfos:         file_clientcomm_v1_clientcomm_proto_enumTypes,
		MessageInfos:      file_clientcomm_v1_clientcomm_proto_msgTypes,
	}.Build()
	File_clientcomm_v1_clientcomm_proto = out.File
	file_clientcomm_v1_clientcomm_proto_rawDesc = nil
	file_clientcomm_v1_clientcomm_proto_goTypes = nil
	file_clientcomm_v1_clientcomm_proto_depIdxs = nil
}
