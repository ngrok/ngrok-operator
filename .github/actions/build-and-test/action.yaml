name: Action - Build and Test
description: "Build and test the operator (with optional e2e tests)"

inputs:
  run-e2e:
    description: "Run e2e tests"
    required: false
    default: "false"
  go-version:
    description: "Go version to use"
    required: true
  ngrok-api-key:
    description: "NGROK_API_KEY for e2e tests, if enabled"
    required: false
    default: "fake-api-key"
  ngrok-authtoken:
    description: "NGROK_AUTHTOKEN for e2e tests, if enabled"
    required: false
    default: "fake-authtoken"

runs:
  using: "composite"
  steps:
    - uses: debianmaster/actions-k3s@master
      id: k3s
      with:
        version: 'latest'

    - shell: bash
      run: |
        kubectl get nodes
        kubectl get pods -A

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ inputs.go-version }}

    - name: Build
      shell: bash
      run: make build

    - name: Lint
      shell: bash
      run: make lint

    - name: Setup Envtest
      shell: bash
      run: make envtest

    - name: Test
      shell: bash
      run: make test

    - name: Build the Docker image
      shell: bash
      run: make docker-build

    - name: Deploy controller to local cluster
      shell: bash
      env:
        # deploy with 1-click demo mode when not running e2e tests
        DEPLOY_ONE_CLICK_DEMO_MODE: ${{ inputs.run-e2e == 'true' &&  'false' || 'true' }}
        NGROK_API_KEY: ${{ inputs.ngrok-api-key }}
        NGROK_AUTHTOKEN: ${{ inputs.ngrok-authtoken }}
        E2E_BINDING_NAME: k8s/e2e-${{ github.run_id }}
        # use the latest image built in this run
        IMG: ngrok/ngrok-operator
      run: |
        make e2e-deploy

    - name: Check if operator is up
      shell: bash
      run: |
        kubectl get nodes
        kubectl get pods -A
        kubectl -n ngrok-operator wait --for=condition=ready pod -l app.kubernetes.io/name=ngrok-operator --timeout=1m || true
        kubectl get pods -A
        kubectl -n ngrok-operator describe pod -l app.kubernetes.io/name=ngrok-operator

    - name: Start an ngrok agent
      uses: addnab/docker-run-action@v3
      if: ${{ inputs.run-e2e == 'true' }}
      with:
        image: ngrok/ngrok:latest
        options: >-
          -v ${{ github.workspace }}:/github_workspace
          --user root
          --entrypoint /bin/bash
          -e NGROK_API_KEY=${{ inputs.ngrok-api-key }}
          -e NGROK_AUTHTOKEN=${{ inputs.ngrok-authtoken }}
          -e E2E_BINDING_NAME=k8s/e2e-${{ github.run_id }}
          -e E2E_TCP_ENDPOINT_NAME=${{ github.run_id }}-tcp
        run: |
          apt-get update && apt-get install -y make

          cd /github_workspace
          make e2e-start-ngrok || exit 1

          # give the operator some time to become eventually consistent
          # - operator registration
          # - bound endpoints projection
          echo "Sleeping 30s to allow the operator to reconcile..."
          sleep 30

    - name: Install cosign
      if: ${{ inputs.run-e2e == 'true' }}
      uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da # v3.7.0
    - name: Install chainsaw
      if: ${{ inputs.run-e2e == 'true' }}
      uses: kyverno/action-install-chainsaw@d311eacde764f806c9658574ff64c9c3b21f8397 # v0.2.11
      with:
        verify: true

    - name: Run e2e tests
      shell: bash
      if: ${{ inputs.run-e2e == 'true' }}
      run: |
        make e2e-tests

    # best effort to remove ngrok k8s resources from cluster
    # this allows our finalizers to delete upstream ngrok API resources too
    # that hopefully helps not pollute our ngrok-operator-ci account
    - name: Cleanup e2e tests
      shell: bash
      if: ${{ always() && inputs.run-e2e == 'true' }}
      run: |
        make e2e-clean
